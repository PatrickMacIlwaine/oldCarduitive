{"ast":null,"code":"var _jsxFileName = \"/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/components/HowToPlay.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './HowToPlay.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HowToPlay(props) {\n  function exitHandler() {\n    props.onExit();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.modal,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.p,\n      children: \"Start CARDUITIVE with 2 to 4 players receiving random cards, numbered 1-100. The goal is to lay these cards in ascending order without communicating what cards you have. You lose if a card is played out of turn (such as 45 before 10). Victory comes when all cards are placed correctly, then your level will increase.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.p,\n      children: \"Remember that you cannot tell the other player what cards you have!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.p,\n      children: \"When you start a new game you will be provided a link to invite the other players.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.p,\n      children: \"Good Luck!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: classes.btn,\n      onClick: exitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Exit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n_c = HowToPlay;\nHowToPlay.propTypes = {\n  onExit: PropTypes.func.isRequired\n};\nexport default HowToPlay;\nvar _c;\n$RefreshReg$(_c, \"HowToPlay\");","map":{"version":3,"names":["React","PropTypes","classes","jsxDEV","_jsxDEV","HowToPlay","props","exitHandler","onExit","className","modal","children","p","fileName","_jsxFileName","lineNumber","columnNumber","type","btn","onClick","_c","propTypes","func","isRequired","$RefreshReg$"],"sources":["/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/components/HowToPlay.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './HowToPlay.module.css';\n\nfunction HowToPlay(props) {\n  function exitHandler() {\n    props.onExit();\n  }\n\n  return (\n    <div className={classes.modal}>\n      <p className={classes.p}>\n        Start CARDUITIVE with 2 to 4 players receiving random cards, numbered\n        1-100. The goal is to lay these cards in ascending order without\n        communicating what cards you have. You lose if a card is played out of\n        turn (such as 45 before 10). Victory comes when all cards are placed\n        correctly, then your level will increase.\n      </p>\n      <p className={classes.p}>\n        Remember that you cannot tell the other player what cards you have!\n      </p>\n      <p className={classes.p}>\n        When you start a new game you will be provided a link to invite the\n        other players.\n      </p>\n      <p className={classes.p}>Good Luck!</p>\n      <button type='button' className={classes.btn} onClick={exitHandler}>\n        <h2>Exit</h2>\n      </button>\n    </div>\n  );\n}\n\nHowToPlay.propTypes = {\n  onExit: PropTypes.func.isRequired,\n};\n\nexport default HowToPlay;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,OAAO,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,SAASA,CAACC,KAAK,EAAE;EACxB,SAASC,WAAWA,CAAA,EAAG;IACrBD,KAAK,CAACE,MAAM,CAAC,CAAC;EAChB;EAEA,oBACEJ,OAAA;IAAKK,SAAS,EAAEP,OAAO,CAACQ,KAAM;IAAAC,QAAA,gBAC5BP,OAAA;MAAGK,SAAS,EAAEP,OAAO,CAACU,CAAE;MAAAD,QAAA,EAAC;IAMzB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJZ,OAAA;MAAGK,SAAS,EAAEP,OAAO,CAACU,CAAE;MAAAD,QAAA,EAAC;IAEzB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJZ,OAAA;MAAGK,SAAS,EAAEP,OAAO,CAACU,CAAE;MAAAD,QAAA,EAAC;IAGzB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACJZ,OAAA;MAAGK,SAAS,EAAEP,OAAO,CAACU,CAAE;MAAAD,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACvCZ,OAAA;MAAQa,IAAI,EAAC,QAAQ;MAACR,SAAS,EAAEP,OAAO,CAACgB,GAAI;MAACC,OAAO,EAAEZ,WAAY;MAAAI,QAAA,eACjEP,OAAA;QAAAO,QAAA,EAAI;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACI,EAAA,GA3BQf,SAAS;AA6BlBA,SAAS,CAACgB,SAAS,GAAG;EACpBb,MAAM,EAAEP,SAAS,CAACqB,IAAI,CAACC;AACzB,CAAC;AAED,eAAelB,SAAS;AAAC,IAAAe,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}