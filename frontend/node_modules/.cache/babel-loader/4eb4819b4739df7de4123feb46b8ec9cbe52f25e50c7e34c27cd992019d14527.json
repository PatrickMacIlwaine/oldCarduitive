{"ast":null,"code":"var _jsxFileName = \"/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/components/PlayingGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlayingGame(props) {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const userID = localStorage.getItem('userID');\n  console.log(roomId);\n  console.log(userID);\n  const [roomData, setRoomData] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  function fetchData(roomId) {\n    return fetch();\n  }\n  const createRoom = async () => {\n    if (roomId) {\n      await fetch(`/game/create/${roomId}`, {\n        method: 'POST'\n      });\n    }\n  };\n  function fetchMessages(roomId) {\n    return fetch(`http://localhost:3001/message/${roomId}`).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).catch(e => {\n      console.error('There was a problem with your fetch operation: ' + e.message);\n    });\n  }\n  function sendMessages(roomId, message) {\n    return fetch(`http://localhost:3001/message/${roomId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text: message\n      })\n    });\n  }\n  function deleteRoom(roomId) {\n    return fetch(`http://localhost:3001/message/${roomId}`, {\n      method: 'DELETE'\n    });\n  }\n  useEffect(() => {\n    console.log(`Room ID : ${roomId}`);\n    const intervalID = setInterval(() => {\n      fetchMessages(roomId).then(setMessages);\n    }, 500);\n    return () => clearInterval(intervalID);\n  }, [roomId]);\n  const handelSumbit = event => {\n    event.preventDefault();\n    sendMessages(roomId, newMessage).then(() => setNewMessage('')).then(() => fetchMessages(roomId).then(setMessages));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"In the Game Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" Chat Room : \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" User ID : \", userID, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Cards : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this), Array.isArray(messages) && messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 3\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => createRoom(roomId),\n      children: \"Create the new Room.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }, this);\n}\n_s(PlayingGame, \"opoVsxTd0uVyIWi0RAlR8lXniIA=\", false, function () {\n  return [useParams];\n});\n_c = PlayingGame;\nexport default PlayingGame;\nvar _c;\n$RefreshReg$(_c, \"PlayingGame\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","PlayingGame","props","_s","roomId","userID","localStorage","getItem","console","log","roomData","setRoomData","messages","setMessages","newMessage","setNewMessage","fetchData","fetch","createRoom","method","fetchMessages","then","response","ok","Error","status","json","catch","e","error","message","sendMessages","headers","body","JSON","stringify","text","deleteRoom","intervalID","setInterval","clearInterval","handelSumbit","event","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/components/PlayingGame.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n\n\nfunction PlayingGame(props){\n\n  const { roomId }= useParams();\n  const userID = localStorage.getItem('userID');\n  console.log(roomId);\n  console.log(userID);\n\n\n  \n  const [roomData, setRoomData] = useState(null);\n\n  \n\n  \n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n\n\n  function fetchData(roomId){\n    return fetch()\n  }\n\n  const createRoom = async () => {\n    if (roomId) {\n      await fetch(`/game/create/${roomId}`, {\n        method: 'POST',\n      });\n    }\n  }\n\n\n\n\n\n\n\n\n\n\n\n  function fetchMessages(roomId) {\n    return fetch(`http://localhost:3001/message/${roomId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .catch(e => {\n      console.error('There was a problem with your fetch operation: ' + e.message);\n    });\n  }\n\n  function sendMessages(roomId, message) {\n    return fetch(`http://localhost:3001/message/${roomId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type' : 'application/json',\n      },\n      body: JSON.stringify({text: message}),\n    });\n  }\n\n  function deleteRoom(roomId) {\n    return fetch(`http://localhost:3001/message/${roomId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  useEffect(() =>  {\n\n    console.log(`Room ID : ${roomId}`);\n    const intervalID = setInterval(() => {\n      fetchMessages(roomId).then(setMessages);\n    }, 500);\n\n    return () => clearInterval(intervalID);\n  }, [roomId]);\n\n  const handelSumbit = (event) => {\n    event.preventDefault();\n    sendMessages(roomId, newMessage)\n    .then(() => setNewMessage(''))\n    .then(() => fetchMessages(roomId).then(setMessages));\n  };\n\n  \n\n\nreturn (\n  <div> \n    <h1>In the Game Now</h1>\n    <h2> Chat Room : {roomId}</h2>\n    <h2> User ID : {userID} </h2>\n    <h2> Cards : </h2>\n    {Array.isArray(messages) && messages.map((message, index) => (\n  <p key = {index}>{message.text}</p>\n))}\n    \n\n\n    <button onClick={() => createRoom(roomId)}>Create the new Room.</button>\n\n    \n  </div>\n\n);\n}\nexport default PlayingGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}