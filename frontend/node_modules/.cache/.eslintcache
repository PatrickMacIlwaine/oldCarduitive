[{"/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/index.js":"1","/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/App.js":"2","/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/components/ChatPage.js":"3","/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/components/StartPage.js":"4","/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/components/PlayingGame.js":"5"},{"size":346,"mtime":1689199457492,"results":"6","hashOfConfig":"7"},{"size":489,"mtime":1689375500007,"results":"8","hashOfConfig":"7"},{"size":2028,"mtime":1689375907354,"results":"9","hashOfConfig":"7"},{"size":1155,"mtime":1689620616025,"results":"10","hashOfConfig":"7"},{"size":4354,"mtime":1689621587338,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"adqfzm",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/index.js",[],[],[],"/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/App.js",[],[],"/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/components/ChatPage.js",[],[],"/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/components/StartPage.js",["30","31","32","33"],[],"import { useState } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\n\n\nfunction StartPage(){\n\n  let navigate = useNavigate();  \n\n  const frontport = process.env.REACT_APP_FRONTPORT\n  const backport = process.env.REACT_APP_BACKPORT\n\n  const generateKey = () => {\n    const url = '' \n    let key = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 5; i++) {\n      key += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return key;\n  };\n\n \n  function starthandleClick(){\n    localStorage.clear();\n\n    const newKey = generateKey();\n    localStorage.setItem('userID','first')\n    startGame(newKey);\n    navigate(`game/${newKey}`);\n  }\n\n\n  const startGame = async (roomId) => {\n    return fetch(`${backport}game/create/${roomId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type' : 'application/json',\n      },\n    });\n  }\n\n\n  \n\nreturn (\n  <div>\n    \n    <h1> Psychic! </h1>\n    <div>\n    <button onClick={starthandleClick}>\n      <h2> Start New Game !</h2>\n    </button> \n    </div>\n\n\n </div>\n\n  \n);\n    \n}\nexport default StartPage;","/Users/Patrick/CodingFolder/Projects/psychic/frontend/src/components/PlayingGame.js",["34","35","36","37"],[],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport classes from './PlayingGame.module.css';\n\n\n\nfunction PlayingGame(props){\n\n  const { roomId }= useParams();\n  const [player,setPlayer] = useState(0);\n  const [roomData, setRoomData] = useState(null);\n  const [ready, setReady]  = useState(false);\n  const [isCopied, setIsCopied] = useState(false);\n\n\n  const frontport = process.env.REACT_APP_FRONTPORT\n  const backport =  process.env.REACT_APP_BACKPORT\n  let navigate = useNavigate();\n\n\n\n  \n\n  const fetchRoomData = async (roomId) => {\n    return fetch(`${backport}game/data/${roomId}`)\n    .then(response => {\n      if (!response.ok){\n        throw new Error(`HTTP error! status : ${response.status}`);\n      }\n      return response.json();\n    })  \n    .catch(e => {\n      console.error('There was a problem with your fetch operation ' + e.message);\n    });\n  }\n\n  const addReadyPerson = async (roomId) => {\n    return fetch(`${backport}game/ready/${roomId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type' : 'application/json',\n      },\n    });\n  }\n\n  const removeNumberFromArray = async (roomId, arrayName, numberToRemove) => {\n    return fetch(`${backport}game/data/${roomId}`, {\n        method: 'PATCH',\n        headers: {\n            'Content-Type' : 'application/json',\n        },\n        body: JSON.stringify({ arrayName, numberToRemove }),\n    });\n}\n\nconst startGame = async (roomId) => {\n  return fetch(`${backport}game/create/${roomId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type' : 'application/json',\n    },\n  });\n}\n\n \n\n\n\n  useEffect(() =>  {\n    if( localStorage.getItem('userID') != undefined){\n      setPlayer(1);\n    }\n    const intervalID = setInterval(() => {\n      fetchRoomData(roomId).then(setRoomData)\n    }, 100);\n    \n    return () => clearInterval(intervalID);\n  }, [roomId]);\n\n\n  function handleClickReady(){\n    localStorage.setItem('player',player)\n    setReady(true);\n    addReadyPerson(roomId);\n  }\n\n \n\n  async function handelPlayAgain(){\n    setReady(false);\n    setPlayer(1);\n    startGame(roomId);\n    \n    window.location.reload();\n\n  }\n\n  function handleCopyClick() {\n    setIsCopied(true);\n    setTimeout(() => setIsCopied(false), 2000)\n  }\n\n\n\nreturn (\n\n  <div> \n  \n    <div>\n\n    {roomData ? (\n      <>\n\n    {roomData.lost && <div>\n        <h1>FAILURE</h1>\n        \n      \n        {localStorage.removeItem('player')}\n\n        \n        <button onClick={handelPlayAgain}> Play again? </button>\n\n    </div>}\n\n    {roomData.won && !roomData.lost && <div>\n        <h1>You Win!</h1>\n        {localStorage.removeItem('player')}\n        <button onClick={handelPlayAgain}> Play again? </button>\n    </div>}\n\n    {!roomData.won && !roomData.lost &&\n    <div>\n    <h1>Game in progress...</h1>\n\n\n      \n    { !roomData.gameStarted &&  <div>\n      \n      <CopyToClipboard text={`${frontport}game/${roomId}`} onCopy={handleCopyClick}>\n        <button>\n        <h2>{`${frontport}${roomId}`}</h2>\n        Copy Link to Clipboard\n        </button>\n      </CopyToClipboard>\n      {isCopied && <span style={{color: 'red'}}>Copied!</span>}\n    </div>}\n\n    <h2> Game Room : {roomId}</h2>\n\n    {!ready && !roomData.gameStarted && <button onClick={handleClickReady}>Ready</button>}\n\n\n\n           \n      {roomData.gameStarted && <div>\n\n      \n      <div  className = {classes.lastPlayed} >\n      Last Playted Card : {String(roomData.lastPlayedCard)}\n      </div>\n\n     {player === 0 &&  <div className= {classes.cardContainer}>\n        {roomData.numbers1.map((num, index) => (\n\n        \n            <button  className = {classes.card} key={index} onClick={() => removeNumberFromArray(roomId, 'numbers1', num)}>\n            {num}\n            </button>\n      \n\n        ))}\n        </div> }\n\n     {player === 1 && <div className= {classes.cardContainer}>\n      \n        {roomData.numbers2.map((num, index) => (\n          <button  className = {classes.card} key={index} onClick={() => removeNumberFromArray(roomId, 'numbers2', num)}>\n          {num}\n          </button>\n        ))}\n        </div>}\n\n        </div>}\n      </div>}\n      </>\n\n    ) : (\n      <div>Loading...</div>\n    )}\n   \n  </div>\n  \n</div>\n\n);\n}\nexport default PlayingGame;",{"ruleId":"38","severity":1,"message":"39","line":1,"column":10,"nodeType":"40","messageId":"41","endLine":1,"endColumn":18},{"ruleId":"38","severity":1,"message":"42","line":2,"column":10,"nodeType":"40","messageId":"41","endLine":2,"endColumn":18},{"ruleId":"38","severity":1,"message":"43","line":9,"column":9,"nodeType":"40","messageId":"41","endLine":9,"endColumn":18},{"ruleId":"38","severity":1,"message":"44","line":13,"column":11,"nodeType":"40","messageId":"41","endLine":13,"endColumn":14},{"ruleId":"38","severity":1,"message":"42","line":3,"column":10,"nodeType":"40","messageId":"41","endLine":3,"endColumn":18},{"ruleId":"38","severity":1,"message":"45","line":20,"column":7,"nodeType":"40","messageId":"41","endLine":20,"endColumn":15},{"ruleId":"46","severity":1,"message":"47","line":72,"column":40,"nodeType":"48","messageId":"49","endLine":72,"endColumn":42},{"ruleId":"50","severity":1,"message":"51","line":80,"column":6,"nodeType":"52","endLine":80,"endColumn":14,"suggestions":"53"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Navigate' is defined but never used.","'frontport' is assigned a value but never used.","'url' is assigned a value but never used.","'navigate' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchRoomData'. Either include it or remove the dependency array.","ArrayExpression",["54"],{"desc":"55","fix":"56"},"Update the dependencies array to be: [fetchRoomData, roomId]",{"range":"57","text":"58"},[1995,2003],"[fetchRoomData, roomId]"]